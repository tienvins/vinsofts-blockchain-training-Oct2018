pragma solidity ^0.4.25;

library SafeMath {
    function add(uint a, uint b) 
        internal 
        pure 
        returns (uint c) 
        {
            c = a + b;
            require(c >= a);
        }
    function sub(uint a, uint b) 
        internal 
        pure 
        returns (uint c) 
        {
            require(b <= a);
            c = a - b;
        }
    function mul(uint a, uint b) 
        internal 
        pure 
        returns (uint c) 
        {
            c = a * b;
            require(a == 0 || c / a == b);
        }
    function div(uint a, uint b) 
        internal 
        pure 
        returns (uint c) 
        {
            require(b > 0);
            c = a / b;
        }
}

contract Token {
    using SafeMath for uint;

    /// @return total amount of tokens
    function totalSupply() constant returns (uint256 supply) {}

    /// @param _owner The address from which the balance will be retrieved
    /// @return The balance
    function balanceOf(address _owner) constant returns (uint256 balance) {}

    /// @notice send `_value` token to `_to` from `msg.sender`
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transfer(address _to, uint256 _value) returns (bool success) {}

    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
    /// @param _from The address of the sender
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}

    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _value The amount of wei to be approved for transfer
    /// @return Whether the approval was successful or not
    function approve(address _spender, uint256 _value) returns (bool success) {}

    /// @param _owner The address of the account owning tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @return Amount of remaining tokens allowed to spent
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}

    event Transfer(
        address indexed _from, 
        address indexed _to, 
        uint256 _value
    );
    event Approval(
        address indexed _owner, 
        address indexed _spender, 
        uint256 _value
    );

}

contract StandardToken is Token {
    function transfer(address _to, uint _value) 
        returns (bool success) 
        {
            if (balances[msg.sender] >= _value && _value > 0) {
                balances[msg.sender] = balances[msg.sender].sub(_value);
                balances[_to] = balances[_to].add(_value);
                Transfer(
                    msg.sender,
                    _to, 
                    _value
                );
                return true;
            } else { return false; }
        }
    
    function transferFrom(address _from, address _to, uint _value) 
        returns (bool success) 
        {
            if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
                balances[_to] = balances[_to].add(_value);
                balances[_from] = balances[_from].sub(_value);
                allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
                Transfer(
                    _from,
                    _to, 
                    _value
                );
                return true;
            } else { return false; }
        }

    function balanceOf(address _owner) 
        constant 
        returns (uint256 balance) 
        {
            return balances[_owner];
        }

    function approve(address _spender, uint _value) 
        returns (bool success) 
        {
            require (balances[msg.sender] >= _value && _value > 0);
            balances[msg.sender] = balances[msg.sender].sub(_value);
            allowed[msg.sender][_spender] = _value;
            Approval(
                msg.sender, 
                _spender, 
                _value
            );
            return true;
        }

    function allowance(address _owner, address _spender) 
        constant 
        returns (uint256 remaining) 
        {
          return allowed[_owner][_spender];
        }

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    uint256 public totalSupply;
}


contract ERC20Token is StandardToken {
    
    string public name;                   
    uint public decimals;                
    string public symbol;                 
    string public version = '1.0';     
    
    constructor(uint _initialSupply,string _nameCoin, string _symbol, uint _decimals) {
        if(_initialSupply==0){
            _initialSupply = 10000;
        }
        if(_decimals==0){
            _decimals = 5;
        }
        decimals = _decimals;
        totalSupply = _initialSupply * 10 **uint(decimals);                      
        name = _nameCoin;     
        symbol = _symbol;  
        balances[msg.sender] = totalSupply;
    }
    
    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
}
