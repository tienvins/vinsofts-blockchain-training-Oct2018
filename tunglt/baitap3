pragma solidity ^0.4.25;
pragma experimental ABIEncoderV2;

contract CaCuocs{
    
    uint public amount = 0 ether;
    uint public soNguoiSeQuayThuong = 2;
    uint public sovongdatraothuong = 0;
    struct Customer{
        uint price;
        address owner;
    }
    
    struct ownerToNumber{
        address owner;
        uint number;
        uint time;
    }
    
    Customer[] customers;
    
    ownerToNumber[] ownertonumbers;
    ownerToNumber[] ownertonumbers2;
    uint[] cacsodadcchon;
    
    mapping(address => uint) ownerToUserId;
    mapping(uint => address[]) public numberToOwner;
    mapping(uint => address[]) numberToOwner2;
    mapping(uint => ownerToNumber[]) public numberToOwnerLS;
    
    
    function randMod(uint _modulus) internal returns(uint) {
        return uint(keccak256(now, msg.sender, now % _modulus)) % _modulus;
    }
    
    function getLenthCustomers() public view returns (uint){
        return ownertonumbers.length;
    }
    function getCacuoc() public view returns (ownerToNumber[]){
         return ownertonumbers;
    }
    function getHistory(uint _traothuonglanthumay) public view returns (ownerToNumber[]){
        return numberToOwnerLS[_traothuonglanthumay];
    }
    function ChonSo(uint _number) public payable{
        if(ownerToUserId[msg.sender]==0x0){
          uint8 id = uint8(customers.push(Customer(0, msg.sender)));
            ownerToUserId[msg.sender] = id; 
        }
        bool oke = true;
        for (uint8 i = 0; i < ownertonumbers.length; i++){
            if(ownertonumbers[i].owner == msg.sender){
                oke = false;
            }
        }
        require(oke==true,"Vui lòng đợi đến khi trao thưởng");
        ownertonumbers.push(ownerToNumber(msg.sender,_number,now));
        require(msg.value >= 1 ether,"Tối thiểu 1 ether");
        amount +=msg.value;
        numberToOwner[_number].push(msg.sender);
        cacsodadcchon.push(_number);
        if(ownertonumbers.length%soNguoiSeQuayThuong==0){
            TraoThuong();
        }
    }
    
    function TraoThuong() private {
        uint rand = randMod(10);
        sovongdatraothuong++;
        address[] adr = numberToOwner[rand];
        if(adr.length>0){
            uint tienthuong = amount/adr.length;
            for (uint8 i = 0; i< adr.length; i++){
                for (uint8 i2 = 0; i2< ownertonumbers.length; i2++){
                    if(adr[i]==ownertonumbers[i2].owner){
                        numberToOwnerLS[sovongdatraothuong].push(ownertonumbers[i2]);
                    }
                }
            }
            for (uint8 i3 = 0; i3 < cacsodadcchon.length; i3++){
                delete numberToOwner[cacsodadcchon[i3]];
            }
            amount = 0 ether;
            delete cacsodadcchon;
            ownertonumbers = ownertonumbers2;
        }else{
            delete cacsodadcchon;
            ownertonumbers = ownertonumbers2;
        }
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
